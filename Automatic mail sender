# -----------------------------------------------------------
# Programma in grado di cercare tra una lista fornita di utenti
# i file excel prodotti dal lettore di contatore elettrico e
# inviare i dati completi via mail agli utenti interessati
# (presenti nella lista e presenti nella lettura del contatore)
#
# (C) 2021 Simone Varischetti, Stabio, Svizzera
# email: simon.varischetti@gmail.com
#
# Se file python aperto per la prima volta, andare
# sul terminale e digitate i seguenti codici :
#
# pip install pandas
# pip install openpyxl
# pip install dask[complete]
#
# SOLO IN CASO DI MANUTENZIONE INSTALLARE ANCHE:
# pip install xlsxwriter
# pip install Datetime
# pip install xlwt
# -----------------------------------------------------------

import smtplib
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
from email.mime.base import MIMEBase
from email import encoders
import os
import pandas as pd
import dask.dataframe as dd
from pandas import ExcelWriter
pd.options.mode.chained_assignment = None  # default='warn'

os.path.abspath("tmp\Report_mensili")

# -----------------------------------------------------------
# SEZIONE UTENTE

# Inserire la path con il nome del file.csv contenente la lista completa degli utenti
nome_lista_utenti = '..\Lista_utenti' + '\\' +\
                    'Lista_utenti' + '.csv'

# Inserire la path con il nome del file.csv contenente i nomi da comparare alla lista utenti
nome_excel = '..\Lista_utenti_out' + '\\' + \
             'Lista_utenti_trovati' + '.xlsx'

# Inserire la mail del mittente
mail_mittente = 'gianpaolo.pontarolo@stabio.ch'     # 'amstabio@mlt-systems.com'

# Inserire il mese desiderato (1 = gennaio, 12 = dicembre)
Variabile_mese = 7

# Inserire l'anno desiderato
Variabile_anno = 2020
# -----------------------------------------------------------

# Inserire la password per utilizzare l'account gmail
# password = input("Digitare la password gmail nella finestra 'run' e premere invio: ")
col_name = ['Nome stazione',
            'Mese',
            'Anno']
df_utenti_trovati = pd.read_excel(nome_excel, names=col_name)
df_nome_lista = df_utenti_trovati
df_utenti_trovati['Anno'] = df_utenti_trovati['Anno'].astype(str)
df_nome = df_utenti_trovati['Nome stazione']
df_mese = df_utenti_trovati['Mese']
print(type(df_mese))
df_anno = df_utenti_trovati['Anno']

# -----------------------------------------------------------
# ESPORTAZIONE DATI EXCEL -> MAIL UTENTI

# mittente = mail_mittente
mittente = mail_mittente
data_csv_destinatari = pd.read_csv(nome_lista_utenti)

# print(data_csv_destinatari)
print()

for x in range(len(df_nome_lista)):
    nome_1 = df_nome.iloc[x]
    mese_nom = df_mese.iloc[x]
    nom_an = df_anno.iloc[x]
    var_ind = "..\Rapporti_out"
    var_fin = var_ind + "\\" + nome_1 + "_" + mese_nom + "_" + nom_an + ".xlsx"

    df_utente_sele = data_csv_destinatari[data_csv_destinatari['Nome_utente'] == nome_1]

    if not df_utente_sele.empty:
        for y in range(len(df_utente_sele)):
            mail_utente_sele = df_utente_sele['mail_utente'].iloc[y]
            lista_mail = [mail_utente_sele]
            nome_utente_sele = df_utente_sele['Nome_destin'].iloc[y]

            print("Stazione trovata:", nome_1)
            print("Nome destinatario:", nome_utente_sele)
            # print("Percorso del file da inviare: \n ", var_fin)
            print("Mail dell'utente:", mail_utente_sele)
            print(var_fin)
            print()

            msg = MIMEMultipart()
            msg['From'] = mittente
            msg['To'] = ", ".join(lista_mail)
            msg['Subject'] = "Rapporto mensile consumo elettrico " + mese_nom + "-" + nom_an + "-" + nome_1

            if df_utente_sele['Sesso_M/F'].iloc[y] == 'M':
                Testo_mail_s = "Egregio Signor " + nome_utente_sele + ", \n"
            elif df_utente_sele['Sesso_M/F'].iloc[y] == 'F':
                Testo_mail_s = "Gentile Signora " + nome_utente_sele + ", \n"

            testo_init = "In allegato trova il rapporto mensile dei vostri consumi elettrici su base oraria. \n \n" \
                         "I dati contenuti nel rapporto si discostano da quelli della fatturazione a causa del " \
                         "leggero sfasamento che vi Ã¨ tra il nostro sistema di rilevamento e quello ufficiale " \
                         "del nostro partner (AET). \n \n" \
                         "I dati per la fatturazione sono determinati dal sistema ufficiale. \n" \
                         "Nel caso non desiderate ricevere il rapporto o volete aggiungere altre persone, vi " \
                         "preghiamo di comunicarcelo. \n \n \n" \
                         "Rimango a vostra disposizione per eventuali domande. \n \n" \
                         "Cordiali saluti, \nG. Pontarolo \n \n \n--- \nGianpaolo Pontarolo \n" \
                         "dipl. El. Ing. ETH / lic. oec. pupl. \nDirettore AMS \n" \
                         "via rognano 6 / 6855 Stabio / +41 91 647 20 73 / +41 79 460 0905 / " \
                         "gianpaolo.pontarolo@stabio.ch"

            Testo_mail = Testo_mail_s + testo_init

            msg.attach(MIMEText(Testo_mail, 'plain'))
            filename = nome_1 + "_" + mese_nom + "_" + nom_an + ".xlsx"
            attachment = open(var_fin, "rb")

            part = MIMEBase('application', 'octet-stream')
            part.set_payload(attachment.read())
            encoders.encode_base64(part)
            part.add_header('Content-Disposition', "attachment; filename= %s" % filename)

            msg.attach(part)
            server = smtplib.SMTP(host="smtp.mlt-systems.ch", port=25)
            server.starttls()
            server.login('MAIL_PC', 'PASSWORD_MAIL')
            server.ehlo()
            text = msg.as_string()
            server.sendmail(mittente, lista_mail, text)

            # Mail di verifica per ogni mail mandata
            server.sendmail(mittente, mittente, text)

server.quit()
